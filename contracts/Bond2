pragma solidity ^0.4.0;

contract Issuer
{
    //STATE VARIABLES
    address public Issuer;
    uint256 public Amount;
    uint256 public Balance;
    bool public _switch = false;
    
    //EVENTS: will create a log in the block that is created from a setter
    event UserStatus(string _msg, address user,string _msg1, uint amount);
    
    //PASS VARIABLES BETWEEN CONTRACTS: ***Must put address of Issuer Contract Here***
    Lender toBePassed = Lender(0xf66c7b16750af02e89271ded2b1c4c4a9229d1d3);
    
    //VARIABLES BEING PASSED
    function LenderWithdrew() constant returns (bool)
    {
        return toBePassed.LenderWithdrew();
    }
    
    bool public paid = toBePassed.LenderWithdrew();
    
    
    function passLender() constant returns (address)
    {
        return toBePassed.passLender();
    }
    
    address public Lenders = toBePassed.passLender();
    
    //CONSTRUCTOR: this will be called as soon as the contract is executed **** Must name function same as contract to get the address***
    function Issuer()
    {
        Issuer = msg.sender;
    }
    
    
    //MODIFIERS:
    modifier OnlyIssuer
    {
        if(Issuer != msg.sender)throw;
        else _;
    }
    
    //PAYABLE FUNCTION:
    function Issuer20() payable
    {
        //This will log a message and the amount of money deposited ont he blockchain
        UserStatus('User: ',msg.sender,'has deposited 20%: ', msg.value);
        Balance = this.balance;
        Amount=5*(this.balance);
    }
    
        //WITHDRAW FUNCTION
    function withdrawPayment(uint Withdraw)
    {
        if(paid = true)
        {
            if(Issuer.send(Withdraw))
            {
                _switch = true;
            }
            else
            {
                _switch = false;
            }
        }
        else
        {
            if(toBePassed.passLender().send(Withdraw))
            {
                _switch = true;
            }
            else
            {
                _switch = false;
            }
        }
    }
    
    //GETTERS:
    function passAmount() constant returns (uint256)
    {
        return Amount;
    }
    
    function passIssuer() constant returns (address)
    {
        return Issuer;
    }
    
        function getBalance() constant returns(uint)
    {
        return this.balance;
    }
}

//CONTRACT:
contract Lender
{
    //STATE VARIABLES
    address public Lender;
    bool public _switch1 = false;
    bool public _switch2 = false;
    uint public IssuerPay;
    
    //CONSTRUCTOR:
    function Lender()
    {
        if (msg.sender != toBePassed.passIssuer()) Lender = msg.sender;
        else throw;
    }
    
    //MODIFIERS
    modifier OnlyIssuer
    {
        if(toBePassed.passIssuer() == msg.sender)_;
        else throw;
    }
    
    modifier OnlyLender
    {
        if(Lender != msg.sender)throw;
        else _;
    }
    
    modifier OnlyBalance
    {
        if(this.balance !=0)throw;
        else _;
    }
    
    //PASS VARIABLES BETWEEN CONTRACTS: ***Must put address of Issuer Contract Here***
    Issuer toBePassed = Issuer(0x75a3a98f5696299071da253c1433a2661898103e);
    
    //VARIABLES BEING PASSED
    function passAmount() constant returns (uint)
    {
        return toBePassed.passAmount();
    }
    
    function passIssuer() constant returns (address)
    {
        return toBePassed.passIssuer();
    }
    
    //PAYABLE FUNCTION
    function LenderBond() payable OnlyLender
    {
        if(msg.value != (toBePassed.passAmount()))throw;
    }
    
    function IssuerRepayment() payable
    {
        IssuerPay = msg.value;
    }
    
    //GETTERS
    function IssuerPayment() constant returns(uint)
    {
        return IssuerPay;
    }
    
    function passLender() constant returns(address)
    {
        return Lender;
    }
    
    function LenderWithdrew() constant returns(bool)
    {
        return _switch2;
    }
    
    //WITHDRAW FUNCTION
    function withdrawFunds(uint Withdraw) OnlyIssuer
    {
        
        if(toBePassed.passIssuer().send(Withdraw))
        {
            _switch1 = true;
        }
        else
        {
            _switch1 = false;
        }
        
    }
    
    //WITHDRAW FUNCTION
    function withdrawIssuerPayment(uint Withdraw)
    {
        
        if(Lender.send(Withdraw))
        {
            _switch2 = true;
        }
        else
        {
            _switch2 = false;
        }
    }
}
